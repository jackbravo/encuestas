<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SeguimientoTable extends Doctrine_Table
{
  public function findForLead($lead_id)
  {
    return $this->createQuery('s')
      ->select('s.*, a.username, d.*')
      ->leftJoin('s.Agente a')
      ->leftJoin('s.Distribuidor d')
      ->addWhere('s.lead_id = ?', $lead_id)
      ->orderBy('s.created_at')
      ->execute();
  }

  public function findVuelta1()
  {
    return $this->findVueltaQuery()
      ->addWhere('s.intento = 1')
      ->addWhere('s.fecha_localizo_dist < (NOW() - interval ' . sfConfig::get('app_tiempo_espera_vuelta_1') . ')') // 2 day
      ->execute(array(), Doctrine::HYDRATE_ARRAY);
  }

  public function findVuelta2()
  {
    return $this->findVueltaQuery()
      ->addWhere('s.intento >= 2')
      ->addWhere('s.fecha_localizo_dist < (NOW() - interval ' . sfConfig::get('app_tiempo_espera_vuelta_2') . ')') // 1 day
      ->execute(array(), Doctrine::HYDRATE_ARRAY);
  }

  public function findVueltaQuery()
  {
    return Doctrine::getTable('Encuesta')->createQuery('l')
      ->select('l.id, l.nombre, l.apellido_p, l.apellido_m, d.state, l.ciudad')
      ->addSelect('s.fecha_localizo_dist, d.name, h.rango, l.rangos_horario')
      ->leftJoin('l.Seguimiento s')
      ->leftJoin('l.Horarios h')
      ->leftJoin('s.Distribuidor d')
      ->addWhere('l.viewer_id IS NULL')
      ->addWhere('s.status = 1')
      ->addOrderBy('s.fecha_localizo_dist ASC')
      ->limit(100);
  }

  public function closeForLead($lead_id)
  {
    return $this->createQuery('s')
      ->update()
      ->set('s.status', 0)
      ->where('s.lead_id = ?', $lead_id)
      ->execute();
  }

  public function getTabTriesPerAgents($from, $to, $vuelta = 1)
  {
    $params = array($vuelta);
    $sql = "SELECT COUNT(s.id) count, a.username
      FROM sf_guard_user a LEFT JOIN seguimiento s ON s.agente_id = a.id
      WHERE intento = ?";
    if ($from !== null) {
      $sql .= " AND s.created_at BETWEEN ? AND ? + interval 1 day";
      $params = array($vuelta, $from, $to);
    }
    $sql .= " GROUP BY s.agente_id";
    $dbh = $this->getConnection();
    $stmt = $dbh->prepare($sql);
    $stmt->execute($params);

    return axaiToolkit::toKeyValueArray('username', 'count', $stmt->fetchAll());
  }

  public function getTabPerAgents($from, $to, $vuelta = 1)
  {
    $params = array($vuelta);
    $sql = "SELECT COUNT(s.id) count, a.username
      FROM sf_guard_user a LEFT JOIN seguimiento s ON s.agent_localizo_dist = a.id
      WHERE  intento = ? AND s.localizo_dist = 1";
    if ($from !== null) {
      $sql .= " AND s.fecha_localizo_dist BETWEEN ? AND ? + interval 1 day";
      $params = array($vuelta, $from, $to);
    }
    $sql .= " GROUP BY s.agent_localizo_dist";
    $dbh = $this->getConnection();
    $stmt = $dbh->prepare($sql);
    $stmt->execute($params);

    return axaiToolkit::toKeyValueArray('username', 'count', $stmt->fetchAll());
  }

  public function getLeadPerAgents($from, $to, $vuelta = 1)
  {
    $params = array($vuelta);
    $sql = "SELECT COUNT(s.id) count, a.username
      FROM sf_guard_user a LEFT JOIN seguimiento s ON s.agent_localizo_lead = a.id
      WHERE intento = ?";
    if ($from !== null) {
      $sql .= " AND s.fecha_localizo_lead BETWEEN ? AND ? + interval 1 day";
      $params = array($vuelta, $from, $to);
    }
    $sql .= " GROUP BY s.agent_localizo_lead";
    $dbh = $this->getConnection();
    $stmt = $dbh->prepare($sql);
    $stmt->execute($params);

    return axaiToolkit::toKeyValueArray('username', 'count', $stmt->fetchAll());
  }

  public function getLeadPerTab($from, $to, $vuelta = 1)
  {
    $params = array($vuelta);
    $sql = "SELECT COUNT(s.id) count, d.id
      FROM distribuidor d LEFT JOIN seguimiento s ON s.distribuidor_id = d.id
      WHERE intento = ?";
    if ($from !== null) {
      $sql .= " AND s.created_at BETWEEN ? AND ? + interval 1 day";
      $params = array($vuelta, $from, $to);
    }
    $sql .= " GROUP BY s.distribuidor_id";
    $dbh = $this->getConnection();
    $stmt = $dbh->prepare($sql);
    $stmt->execute($params);

    return axaiToolkit::toKeyValueArray('id', 'count', $stmt->fetchAll());
  }

  public function getAsignPerTab($from, $to, $vuelta = 1)
  {
    $params = array($vuelta);
    $sql = "SELECT COUNT(s.id) count, d.id
      FROM distribuidor d LEFT JOIN seguimiento s ON s.distribuidor_id = d.id
      WHERE intento = ? AND localizo_dist = 1";
    if ($from !== null) {
      $sql .= " AND s.fecha_localizo_dist BETWEEN ? AND ? + interval 1 day";
      $params = array($vuelta, $from, $to);
    }
    $sql .= " GROUP BY s.distribuidor_id";
    $dbh = $this->getConnection();
    $stmt = $dbh->prepare($sql);
    $stmt->execute($params);

    return axaiToolkit::toKeyValueArray('id', 'count', $stmt->fetchAll());
  }

  public function getSegPerTab($from, $to, $vuelta = 1)
  {
    $params = array($vuelta);
    $sql = "SELECT COUNT(s.id) count, d.id
      FROM distribuidor d LEFT JOIN seguimiento s ON s.distribuidor_id = d.id
      WHERE intento = ? AND localizo_lead = 1";
    if ($from !== null) {
      $sql .= " AND s.fecha_localizo_lead BETWEEN ? AND ? + interval 1 day";
      $params = array($vuelta, $from, $to);
    }
    $sql .= " GROUP BY s.distribuidor_id";
    $dbh = $this->getConnection();
    $stmt = $dbh->prepare($sql);
    $stmt->execute($params);

    return axaiToolkit::toKeyValueArray('id', 'count', $stmt->fetchAll());
  }

  public function getForExport()
  {
    $sql = "
      SELECT s.id AS seguimiento_id, s.distribuidor_id, lead_id, u.username AS agente_creo,
        localizo_dist, user_dist.username AS agente_localizo_dist, fecha_localizo_dist,
        localizo_lead, user_lead.username AS agente_localizo_lead, fecha_localizo_lead,
        intento AS vuelta 
      FROM seguimiento AS s
        LEFT JOIN sf_guard_user AS u ON u.id = s.agente_id
        LEFT JOIN sf_guard_user AS user_dist ON user_dist.id = s.agent_localizo_dist
        LEFT JOIN sf_guard_user AS user_lead ON user_lead.id = s.agent_localizo_lead
    ";
    $dbh = $this->getConnection();
    $stmt = $dbh->prepare($sql);
    $stmt->execute();

    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}
